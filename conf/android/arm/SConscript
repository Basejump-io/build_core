# Copyright 2011, Qualcomm Innovation Center, Inc.
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
# 

import os
Import('env')

# android specific vars
vars = Variables()
vars.Add(PathVariable('ANDROID_SRC', ' Base directory of Android source tree', os.environ.get('ANDROID_SRC')))
vars.Add(PathVariable('ANDROID_NDK', ' Base directory of Android NDK', os.environ.get('ANDROID_NDK')))
vars.Add(PathVariable('ANDROID_SDK', ' Base directory of Android SDK', os.environ.get('ANDROID_SDK')))
vars.Add('ANDROID_TARGET', ' Target to be used for the build', os.environ.get('ANDROID_TARGET'))
vars.Add(EnumVariable('ANDROID_API_LEVEL', ' Android API level (8, 9, 10, 14, 15 or 16)', 
                      os.environ.get('ANDROID_API_LEVEL'), allowed_values=('8', '9', '10', '14', '15', '16', ''),  map={}, ignorecase=0))
vars.Update(env)

# Determine Android NDK version
if os.path.exists(env.subst('$ANDROID_NDK/build/prebuilt/$PREBUILT_HOST_OS/arm-eabi-4.4.0/bin')):
   ndkVersion = '4'
elif os.path.exists(env.subst('$ANDROID_NDK/toolchains')):
   ndk_str = env.subst('$ANDROID_NDK')
   if (ndk_str.find('android-ndk-r5') != -1):
      ndkVersion = '5'
   elif (ndk_str.find('android-ndk-r6') != -1):
      ndkVersion = '6'
   elif (ndk_str.find('android-ndk-r7') != -1):
      ndkVersion = '7'
   elif (ndk_str.find('android-ndk-r8b') != -1):
      ndkVersion = '8b'
   elif (ndk_str.find('android-ndk-r8') != -1):
      ndkVersion = '8'
   else: #all unknown ndks will be treated like ndk-8b
      ndkVersion = '8b'
else:
   print 'Cannot determine Android NDK version'
   Exit()
vars.Add(EnumVariable('ANDROID_NDK_VERSION', ' Android NDK Version number (4 through 8b)', 
                      ndkVersion, allowed_values=('4', '5', '6', '7', '8','8b'),  map={}, ignorecase=0))
vars.Update(env)
Help(vars.GenerateHelpText(env))

# Verify dependencies
if '' == env.subst('$ANDROID_NDK'):
   print 'ANDROID_NDK variable is required'
   Exit()

if '' == env.subst('$ANDROID_SRC'):
   print 'ANDROID_SRC variable is required'
   Exit()

if '' == env.subst('$ANDROID_TARGET'):
   env['ANDROID_TARGET'] = 'generic'
      
if '' == env.subst('$ANDROID_API_LEVEL'):
   env['ANDROID_API_LEVEL'] = '8'


# Override MSVC build settings when building on windows.
if 'win32' == env.subst('$HOST_OS'):
   env['OBJPREFIX']      = ''
   env['OBJSUFFIX']      = '.o'
   env['SHOBJPREFIX']    = '$OBJPREFIX'
   env['SHOBJSUFFIX']    = '$OBJSUFFIX'
   env['PROGPREFIX']     = ''
   env['PROGSUFFIX']     = ''
   env['LIBPREFIX']      = 'lib'
   env['LIBSUFFIX']      = '.a'
   env['SHLIBPREFIX']    = '$LIBPREFIX'
   env['SHLIBSUFFIX']    = '.so'
   env['LIBPREFIXES']    = [ '$LIBPREFIX' ]
   env['LIBSUFFIXES']    = [ '$LIBSUFFIX', '$SHLIBSUFFIX' ]
   env['PREBUILT_HOST_OS'] = 'windows'
else:
   env['PREBUILT_HOST_OS'] = 'linux-x86'

# Android specific compiler flags
# These flags are copied from the Android NDK version r4. 
# CHANGING THESE COULD AFFECT COMPATIBILITY WITH THE NDK. 

env.Append(CPPDEFINES=['QCC_OS_ANDROID',
                       'QCC_CPU_ARM',
                       'ANDROID',
                       '__ARM_ARCH_5__',
                       '__ARM_ARCH_5T__',
                       '__ARM_ARCH_5E__',
                       '__ARM_ARCH_5TE__'])

env.Append(CPPFLAGS=['-fpic',
                     '-ffunction-sections',
                     '-funwind-tables',
                     '-fstack-protector',
                     '-Wno-psabi',
                     '-march=armv5te',
                     '-mtune=xscale',
                     '-msoft-float',
                     '-mthumb',
                     '-Os',
                     '-fomit-frame-pointer',
                     '-Wno-unused',
                     '-Wa,--noexecstack'])

env.Append(CXXFLAGS=['-fno-exceptions',
                     '-fno-rtti'])

# More compiler flags that Alljoyn likes to see
env.Append(CPPFLAGS=['-Wall', '-pipe'])

# NDK version specific flags
if ndkVersion >= 5:
   env.Append(CPPFLAGS=['-fno-strict-aliasing',
                        '-funswitch-loops',
                        '-finline-limit=300'])
else:
   env.Append(CPPFLAGS=['-mthumb-interwork',
                        '-fno-short-enums',
                        '-fno-strict-aliasing',
                        '-finline-limit=64'])

# Use Android provided tools
if (env.subst('$ANDROID_NDK_VERSION') == '8b'):
   env['ANDROID_TOOLS'] = '$ANDROID_NDK/toolchains/arm-linux-androideabi-4.6/prebuilt/$PREBUILT_HOST_OS/bin'
   env['AR'] = '$ANDROID_TOOLS/arm-linux-androideabi-ar'
   env['CC'] = '$ANDROID_TOOLS/arm-linux-androideabi-gcc'
   env['CXX'] = '$ANDROID_TOOLS/arm-linux-androideabi-g++'
   env['LINK'] = '$ANDROID_TOOLS/arm-linux-androideabi-gcc'
elif (env.subst('$ANDROID_NDK_VERSION') == '5' or 
    env.subst('$ANDROID_NDK_VERSION') == '6' or
    env.subst('$ANDROID_NDK_VERSION') == '7' or
    env.subst('$ANDROID_NDK_VERSION') == '8'):
   env['ANDROID_TOOLS'] = '$ANDROID_NDK/toolchains/arm-linux-androideabi-4.4.3/prebuilt/$PREBUILT_HOST_OS/bin'
   env['AR'] = '$ANDROID_TOOLS/arm-linux-androideabi-ar'
   env['CC'] = '$ANDROID_TOOLS/arm-linux-androideabi-gcc'
   env['CXX'] = '$ANDROID_TOOLS/arm-linux-androideabi-g++'
   env['LINK'] = '$ANDROID_TOOLS/arm-linux-androideabi-gcc'
else:
    env['ANDROID_TOOLS'] = '$ANDROID_NDK/build/prebuilt/$PREBUILT_HOST_OS/arm-eabi-4.4.0/bin'
    env['AR'] = '$ANDROID_TOOLS/arm-eabi-ar'
    env['CC'] = '$ANDROID_TOOLS/arm-eabi-gcc'
    env['CXX'] = '$ANDROID_TOOLS/arm-eabi-g++'
    env['LINK'] = '$ANDROID_TOOLS/arm-eabi-gcc'

# Normalize NDK platform support (only certain ANDROID_API_LEVELs are directly supported)
if int(env['ANDROID_API_LEVEL']) >= 14:
   env['ANDROID_API_LEVEL_NDK'] = '14';
elif int(env['ANDROID_API_LEVEL']) >= 9:
   env['ANDROID_API_LEVEL_NDK'] = '9';
else:
   env['ANDROID_API_LEVEL_NDK'] = '8';

# Android include paths
if (env.subst('$ANDROID_NDK_VERSION') == '5' or 
    env.subst('$ANDROID_NDK_VERSION') == '6' or
    env.subst('$ANDROID_NDK_VERSION') == '7' or
    env.subst('$ANDROID_NDK_VERSION') == '8'):
   env.Append(CPPPATH=['$ANDROID_NDK/platforms/android-$ANDROID_API_LEVEL_NDK/arch-arm/usr/include',
                       #Using GNU STL.
                       '$ANDROID_NDK/sources/cxx-stl/gnu-libstdc++/include',
                       '$ANDROID_NDK/sources/cxx-stl/gnu-libstdc++/include/backward',
                       '$ANDROID_NDK/sources/cxx-stl/gnu-libstdc++/libs/armeabi/include',
                       '$ANDROID_SRC/external/bluetooth/bluez/include',
                       '$ANDROID_SRC/external/openssl/include'])
elif (env.subst('$ANDROID_NDK_VERSION') == '8b'):
   env.Append(CPPPATH=['$ANDROID_NDK/platforms/android-$ANDROID_API_LEVEL_NDK/arch-arm/usr/include',
                       #Using GNU STL.
                       '$ANDROID_NDK/sources/cxx-stl/gnu-libstdc++/4.6/include',
                       '$ANDROID_NDK/sources/cxx-stl/gnu-libstdc++/4.6/include/backward',
                       '$ANDROID_NDK/sources/cxx-stl/gnu-libstdc++/4.6/libs/armeabi/include',
                       '$ANDROID_SRC/external/bluetooth/bluez/include',
                       '$ANDROID_SRC/external/openssl/include'])
else:
    env.Append(CPPPATH=['$ANDROID_NDK/build/platforms/android-$ANDROID_API_LEVEL_NDK/arch-arm/usr/include',
                        '$ANDROID_SRC/external/bluetooth/bluez/include',
                        '$ANDROID_SRC/external/openssl/include'])

# Android library locations
if (env.subst('$ANDROID_NDK_VERSION') == '5' or 
    env.subst('$ANDROID_NDK_VERSION') == '6'):
   #append the location of the libstdc++ library
   env.Append(LIBPATH=['$ANDROID_NDK/sources/cxx-stl/gnu-libstdc++/libs/armeabi'])
   
   env.Append(LIBPATH=['$ANDROID_NDK/platforms/android-$ANDROID_API_LEVEL_NDK/arch-arm/usr/lib'])
   #append the location of the gcc library
   env.Append(LIBPATH=['$ANDROID_NDK/toolchains/arm-linux-androideabi-4.4.3/prebuilt/$PREBUILT_HOST_OS/lib/gcc/arm-linux-androideabi/4.4.3/'])
elif (env.subst('$ANDROID_NDK_VERSION') == '7' or 
      env.subst('$ANDROID_NDK_VERSION') == '8'):
   env.Append(LIBPATH=['$ANDROID_NDK/platforms/android-$ANDROID_API_LEVEL_NDK/arch-arm/usr/lib'])
   #append the location of the gnustl_static library
   env.Append(LIBPATH=['$ANDROID_NDK/sources/cxx-stl/gnu-libstdc++/libs/armeabi'])
   #append the location of the gcc library
   env.Append(LIBPATH=['$ANDROID_NDK/toolchains/arm-linux-androideabi-4.4.3/prebuilt/$PREBUILT_HOST_OS/lib/gcc/arm-linux-androideabi/4.4.3/'])
elif (env.subst('$ANDROID_NDK_VERSION') == '8b'):
   env.Append(LIBPATH=['$ANDROID_NDK/platforms/android-$ANDROID_API_LEVEL_NDK/arch-arm/usr/lib'])
   #append the location of the gnustl_static library
   env.Append(LIBPATH=['$ANDROID_NDK/sources/cxx-stl/gnu-libstdc++/4.6/libs/armeabi'])
   #append the location of the gcc library
   env.Append(LIBPATH=['$ANDROID_NDK/toolchains/arm-linux-androideabi-4.6/prebuilt/$PREBUILT_HOST_OS/lib/gcc/arm-linux-androideabi/4.6.x-google/'])

else:
    env.Append(LIBPATH=['$ANDROID_NDK/build/platforms/android-$ANDROID_API_LEVEL_NDK/arch-arm/usr/lib'])
    #append the location of the gcc library
    env.Append(LIBPATH=['$ANDROID_NDK/build/prebuilt/$PREBUILT_HOST_OS/arm-eabi-4.4.0/lib/gcc/arm-eabi/4.4.0/'])
    
env.Append(LIBPATH=['$ANDROID_SRC/out/target/product/$ANDROID_TARGET/system/lib'])


# Android SDK lib
env.AppendENVPath("JAVACLASSPATH", os.environ.get('CLASSPATH'))
if '' != env['ANDROID_SDK']:
   env.AppendENVPath("JAVACLASSPATH", [env.subst('$ANDROID_SDK/platforms/android-$ANDROID_API_LEVEL/android.jar')])
env['JAVACLASSPATH'] = env['ENV']['JAVACLASSPATH']

# Android link flags
if ndkVersion >= 5:
   env.Append(CXXFLAGS=['-Wno-deprecated'])
   env.Append(LINKFLAGS=['-Wl,--gc-sections',
                         '-Wl,-z,nocopyreloc',
                         '--sysroot=$ANDROID_NDK/platforms/android-$ANDROID_API_LEVEL_NDK/arch-arm',
                         '-Wl,--no-undefined',
                         '-Wl,-z,noexecstack',
                         '-Wl,--warn-once',
                         '-Wl,-rpath-link=$ANDROID_NDK/platforms/android-$ANDROID_API_LEVEL_NDK/arch-arm/usr/lib'])

   # SCons default SHLINKFLAGS is '$LINKFLAGS -shared'.  Since we don't
   # want to pull in $LINKFLAGS, reset it here instead of Append().

   if env['VARIANT'] == 'debug':
      stripomatic = ''
   else:
      stripomatic = '-s'
   
   env['SHLINKFLAGS'] = ' '.join(['-Wl,-soname,${TARGET.file} '
                                  '-shared',
                                  '--sysroot=$ANDROID_NDK/platforms/android-$ANDROID_API_LEVEL_NDK/arch-arm',
                                  '$ANDROID_NDK/platforms/android-$ANDROID_API_LEVEL_NDK/arch-arm/usr/lib/libc.so',
                                  '$ANDROID_NDK/platforms/android-$ANDROID_API_LEVEL_NDK/arch-arm/usr/lib/libstdc++.so',
                                  '$ANDROID_NDK/platforms/android-$ANDROID_API_LEVEL_NDK/arch-arm/usr/lib/libm.so',
                                  '-Wl,--fix-cortex-a8',
                                  '-Wl,--no-undefined',
                                  '-Wl,-z,noexecstack',
                                  '-Wl,-rpath-link=$ANDROID_NDK/platforms/android-$ANDROID_API_LEVEL_NDK/arch-arm/usr/lib',
                                  stripomatic])
else:
    env.Append(LINKFLAGS=['-nostdlib',
                          '-Bdynamic',
                          '-Wl,--no-undefined',
                          '-Wl,-T,$ANDROID_NDK/build/prebuilt/$PREBUILT_HOST_OS/arm-eabi-4.4.0/arm-eabi/lib/ldscripts/armelf.x',
                          '-Wl,-dynamic-linker,/system/bin/linker',
                          '-Wl,--gc-sections',
                          '-Wl,-z,nocopyreloc',
                          '-Wl,-rpath-link=$ANDROID_NDK/build/platforms/android-$ANDROID_API_LEVEL_NDK/arch-arm/usr/lib',
                          '$ANDROID_NDK/build/platforms/android-$ANDROID_API_LEVEL_NDK/arch-arm/usr/lib/crtbegin_dynamic.o'])

    # Android linking requires a postfix set of objects
    env.Append(LINKCOM=' $LINKFLAGS_POST')
    env.Append(LINKFLAGS_POST=[#'$ANDROID_NDK/build/prebuilt/$PREBUILT_HOST_OS/arm-eabi-4.4.0/lib/gcc/arm-eabi/4.4.0/libgcc.a',
                               '$ANDROID_NDK/build/platforms/android-$ANDROID_API_LEVEL_NDK/arch-arm/usr/lib/crtend_android.o'])

    # SCons default SHLINKFLAGS is '$LINKFLAGS -shared'.  Since we don't
    # want to pull in $LINKFLAGS, reset it here instead of Append().

    if env['VARIANT'] == 'debug':
        stripomatic = ''
    else:
        stripomatic = '-s'
   
    env['SHLINKFLAGS'] = ' '.join(['-nostdlib',
                                   '-march=armv5te',
                                   '-mtune=xscale',
                                   '-Wl,-soname,${TARGET.file}',
                                   '-Wl,-shared,-Bsymbolic',
                                   '-Wl,--fix-cortex-a8',
                                   '-Wl,--no-undefined',
                                   '-Wl,-z,noexecstack',
                                   '-Wl,-rpath-link=$ANDROID_NDK/build/platforms/android-$ANDROID_API_LEVEL_NDK/arch-arm/usr/lib',
                                   stripomatic])

# Debug/Release variants
if env['VARIANT'] == 'debug':
   env.Append(CPPFLAGS=['-O0', '-g'])
   env.Append(JAVACFLAGS='-g -Xlint -Xlint:-serial')
else:
   env.Append(CPPFLAGS=['-O3'])
   env.Append(LINKFLAGS='-s')
   env.Append(JAVACFLAGS='-Xlint -Xlint:-serial')
